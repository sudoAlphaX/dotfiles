# https://wiki.hyprland.org/Configuring/Keywords/

$mainMod = SUPER    # Set 'SUPER' Key as Mainmod key

bind = $mainMod, w, exec, $terminal
bind = $mainMod, q, killactive
bind = $mainMod, f, fullscreen, 1
bind = $mainMod + SHIFT, f, fullscreen, 0
bind = $mainMod, p, togglefloating
bind = $mainMod + SHIFT, p, pin
bind = $mainMod, b, exec, $browser
bind = $mainMod, r, exec, $menu
bind = $mainMod + ALT, r, exec, $menu_all
bind = $mainMod, t, togglesplit
bind = $mainMod, TAB, workspace, previous
bind = $mainMod + SHIFT, TAB, movetoworkspace, previous
bind = $mainMod, e, exec, $fileManager
bind = $mainMod + CTRL, x, exec, kill -9 $(hyprctl -j activewindow | jq .pid);

# Navigating and moving windows to workspaces
bind = $mainMod + CTRL, code:35, workspace, r+1  # use ] to go to the next workspace
bind = $mainMod + CTRL, code:34, workspace, r-1  # use [ to go to the previous workspace
bind = $mainMod, code:35, workspace, e+1  # use ] to go to the next open workspace
bind = $mainMod, code:34, workspace, e-1  # use [ to go to the previous open workspace
bind = $mainMod + SHIFT, code:35, movetoworkspace, r+1 # move the current window to the next workspace
bind = $mainMod + SHIFT, code:34, movetoworkspace, r-1 # move the current window to the previous workspace
bind = $mainMod + CTRL +SHIFT, code:35, movetoworkspace, e+1 # move the current window to the next open workspace
bind = $mainMod + CTRL + SHIFT, code:34, movetoworkspace, e-1 # move the current window to the previous open workspace
bind = $mainMod, o, workspace, empty   # go to an empty workspace
bind = $mainMod + SHIFT, o, movetoworkspace, empty   # move current window to an empty workspace

# Move focus with mainMod + vim keybinds
bind = $mainMod, h, movefocus, l
bind = $mainMod, l, movefocus, r
bind = $mainMod, k, movefocus, u
bind = $mainMod, j, movefocus, d

# Move focus with mainMod + vim keybinds
binde = $mainMod + SHIFT, h, exec, echo "l" 20 | $confdir/scripts/window_movement.sh
binde = $mainMod + SHIFT, l, exec, echo "r" 20 | $confdir/scripts/window_movement.sh
binde = $mainMod + SHIFT, k, exec, echo "u" 20 | $confdir/scripts/window_movement.sh
binde = $mainMod + SHIFT, j, exec, echo "d" 20 | $confdir/scripts/window_movement.sh

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod + SHIFT, 1, movetoworkspace, 1
bind = $mainMod + SHIFT, 2, movetoworkspace, 2
bind = $mainMod + SHIFT, 3, movetoworkspace, 3
bind = $mainMod + SHIFT, 4, movetoworkspace, 4
bind = $mainMod + SHIFT, 5, movetoworkspace, 5
bind = $mainMod + SHIFT, 6, movetoworkspace, 6
bind = $mainMod + SHIFT, 7, movetoworkspace, 7
bind = $mainMod + SHIFT, 8, movetoworkspace, 8
bind = $mainMod + SHIFT, 9, movetoworkspace, 9
bind = $mainMod + SHIFT, 0, movetoworkspace, 10

# Resizing current window
binde=$mainMod,right,resizeactive,10 0
binde=$mainMod,left,resizeactive,-10 0
binde=$mainMod,up,resizeactive,0 -10
binde=$mainMod,down,resizeactive,0 10

binde=$mainMod + SHIFT,right,resizeactive,50 0
binde=$mainMod + SHIFT,left,resizeactive,-50 0
binde=$mainMod + SHIFT,up,resizeactive,0 -50
binde=$mainMod + SHIFT,down,resizeactive,0 50

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Scroll through all workspaces with CTRL + mainMod + scroll
bind = $mainMod + CTRL, mouse_down, workspace, e+1
bind = $mainMod + CTRL, mouse_up, workspace, e-1

# Special workspaces
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod + SHIFT, S, movetoworkspace, special:magic
bind = $mainMod, D, exec, hyprctl dispatch togglespecialworkspace && hyprctl dispatch togglespecialworkspace
bind = $mainMod + SHIFT, D, movetoworkspace, e+0     # Move the current window from special workspace to active workspace

bind = $mainMod + CTRL, 1, togglespecialworkspace, s1
bind = $mainMod + CTRL, 2, togglespecialworkspace, s2
bind = $mainMod + CTRL, 3, togglespecialworkspace, s3
bind = $mainMod + CTRL, 4, togglespecialworkspace, s4
bind = $mainMod + CTRL, 5, togglespecialworkspace, s5
bind = $mainMod + CTRL, 6, togglespecialworkspace, s6
bind = $mainMod + CTRL, 7, togglespecialworkspace, s7
bind = $mainMod + CTRL, 8, togglespecialworkspace, s8
bind = $mainMod + CTRL, 9, togglespecialworkspace, s9
bind = $mainMod + CTRL, 0, togglespecialworkspace, s10
bind = $mainMod + CTRL + SHIFT, 1, movetoworkspace, special:s1
bind = $mainMod + CTRL + SHIFT, 2, movetoworkspace, special:s2
bind = $mainMod + CTRL + SHIFT, 3, movetoworkspace, special:s3
bind = $mainMod + CTRL + SHIFT, 4, movetoworkspace, special:s4
bind = $mainMod + CTRL + SHIFT, 5, movetoworkspace, special:s5
bind = $mainMod + CTRL + SHIFT, 6, movetoworkspace, special:s6
bind = $mainMod + CTRL + SHIFT, 7, movetoworkspace, special:s7
bind = $mainMod + CTRL + SHIFT, 8, movetoworkspace, special:s8
bind = $mainMod + CTRL + SHIFT, 9, movetoworkspace, special:s9
bind = $mainMod + CTRL + SHIFT, 0, movetoworkspace, special:s10

# Volume controls
bindel =, XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_SINK@ 0.02+; notify-send --category=device --urgency=low --hint=int:value:$(pactl get-sink-volume $(pactl get-default-sink) | grep -oP '\d?\d?\d%' | head --lines=1 | sed 's/%//g') volume_event
bindel =, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_SINK@ 0.02-; notify-send --category=device --urgency=low --hint=int:value:$(pactl get-sink-volume $(pactl get-default-sink) | grep -oP '\d?\d?\d%' | head --lines=1 | sed 's/%//g') volume_event 
bindel =, XF86AudioMute, exec, wpctl set-mute @DEFAULT_SINK@ toggle

# mic mute toggle
bindl =, XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_SOURCE@ toggle

# media controls
bindl =, XF86AudioPlay, exec, playerctl play
bindl=, XF86AudioPause, exec, playerctl pause
bindl=, XF86AudioNext, exec, playerctl next
bindl=, XF86AudioPrev, exec, playerctl previous

# clipboard manager binds (keyboard history)
bind = $mainMod, v, exec, cliphist list | $clipboardMenu | cliphist decode | wl-copy

# power controls
bindl = $mainMod + SHIFT, q, exec, $powermenu
bindl = CTRL + ALT, code:119, exec, hyprctl dispatch exit
bindl = ALT, f4, exec, $powermenu
bind = $mainMod + CTRL + ALT, l, exec, systemd-inhibit bash $confdir/scripts/hyprlock-transparent.sh
bind = $mainMod + ALT, l, exec, $lockscreen

# Brightness controls
bindel =, XF86MonBrightnessUp, exec, val=$(brightnessctl --device='intel_backlight' -m s +1%); notify-send --category=device --urgency=low --hint=int:value:$(($(echo $val | cut --delimiter="," --fields=3)*100/$(echo $val | cut --delimiter="," --fields=5))) brightness_event
bindel =, XF86MonBrightnessDown, exec, val=$(brightnessctl --device='intel_backlight' --min-value=75 -m s 1%-); notify-send --category=device --urgency=low --hint=int:value:$(($(echo $val | cut --delimiter="," --fields=3)*100/$(echo $val | cut --delimiter="," --fields=5))) brightness_event
bindel = SHIFT, XF86MonBrightnessUp, exec, val=$(brightnessctl --device='intel_backlight' -m s +5%); notify-send --category=device --urgency=low --hint=int:value:$(($(echo $val | cut --delimiter="," --fields=3)*100/$(echo $val | cut --delimiter="," --fields=5))) brightness_event
bindel = SHIFT, XF86MonBrightnessDown, exec, val=$(brightnessctl --device='intel_backlight' --min-value=75 -m s 5%-); notify-send --urgency=low --category=device --hint=int:value:$(($(echo $val | cut --delimiter="," --fields=3)*100/$(echo $val | cut --delimiter="," --fields=5))) brightness_event

# Screenshots
bind = $mainMod + CTRL, S, exec, grim -g "$(slurp -d)" - | wl-copy
bind = , Print, exec, grim - | wl-copy; notify-send --urgency=low "Screenshot copied to clipboard"
bind = SHIFT, Print, exec, grim -g "$(slurp -d)" - | wl-copy; notify-send --urgency=low "Screenshot copied to clipboard"
bind = CTRL, Print, exec, window=$(hyprctl activewindow -j); filename="$(date +%Y%m%d_%H%M%S)_$(echo $window | jq -r .class).png"; grim "$HOME/Pictures/Screenshots/$filename"; notify-send --urgency=low "Screenshot saved under: $filename"
bind = CTRL + SHIFT, Print, exec, window=$(hyprctl activewindow -j); filename="$(date +%Y%m%d_%H%M%S)_$(echo $window | jq -r .class).png"; grim -g "$(slurp -d)" "$HOME/Pictures/Screenshots/$filename"; notify-send --urgency=low "Screenshot saved under: $filename"

# Screenrecord
bind = ALT, Print, exec, $confdir/scripts/screen-record.sh true false
bind = ALT + SHIFT, Print, exec, $confdir/scripts/screen-record.sh true true
bind = ALT + CTRL, Print, exec, $confdir/scripts/screen-record.sh false false
bind = ALT + CTRL + SHIFT, Print, exec, $confdir/scripts/screen-record.sh false true

# Change wallpaper
bind = $mainMod + Alt, W, exec, $confdir/scripts/hyprpaper-gen.sh -r -S

# Bind to toggle touchpad
bind =, XF86Search, exec, $confdir/scripts/touchpad-toggle.sh
