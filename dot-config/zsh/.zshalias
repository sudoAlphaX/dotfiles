# Quick configs for apps
alias zshconf="nvim $ZDOTDIR/.zshrc"
alias tmuxconf="nvim $XDG_CONFIG_HOME/tmux/tmux.conf"
alias hyprconf="cd $XDG_CONFIG_HOME/hypr/"
alias nvimconf="cd $XDG_CONFIG_HOME/$NVIM_APPNAME/"

# Quick cd ..
alias ..="cd .."
alias ...="cd ../../"
alias ....="cd ../../../"
alias .....="cd ../../../../"
alias .4="cd ../../../../"
alias .5="cd ../../../../.."

# Always copy contents of directories (r)ecursively and explain (v) what was done
# alias cp="cp -irv"

# Interactive delete (and trash)
alias dl="trash-put -v"
alias del="rm -Iv"

# mkdir with parents and nocorrect
alias mkdir="nocorrect mkdir -pv"

# ls aliases
alias lt="ls -Ah --sort=time"
alias ltr="lt --reverse"
alias llt="lt -l"
alias lltr="ltr -l"
alias l.="ls -dlAF .* --color=auto"
alias lv="ls -Ah --sort=version"
alias lvr="lv --reverse"
alias llv="lv -l"
alias llvr="llv --reverse"

# Check which package owns a file
# function whohas() {
#   if [ -z "$1" ]; then
#     echo "Usage: $0 <file>"
#     return 1
#   fi
#
#   if command -v "$1" >/dev/null; then
#     pacman -Qo "$(whereis -b $1 | awk '{print $2}')" 
#   elif test -e $1; then
#     pacman -Qo "$1"
#   else
#     echo "File '$1' not found."
#   fi
# }

# Easy lazygit
alias lg="lazygit"
alias lz="lazygit"

# Grep auto colorize
alias grep="grep --color=auto"

# Always try to (c)ontinue getting a partially-downloaded file and use XDG_DATA_HOME for wget-hsts file
alias wget="wget -c --hsts-file=\"$XDG_DATA_HOME/wget-hsts\""

# thefuck utility configuration and aliases
# eval $(thefuck --alias)
# alias f="fuck"

# Alternate neovim profiles
alias notesvim="NVIM_APPNAME=nvim-notesvim nvim"
alias truenvim="NVIM_APPNAME=nvim nvim"

# Sudo with alias and nocorrect fix
function sudo()
{
  if [ "$1" = "nocorrect" ]; then
    shift
    nocorrect command sudo "$@"
  else
    command sudo "$@"
  fi
}

alias sudo="sudo "
alias esudo="sudo -E "

# Memes
alias pls="sudo run0 "

# Rsync
rsyncflags="--recursive \
  --links \
  --times \
  --atimes \
  --devices \
  --specials \
  --info=PROGRESS2 \
  --human-readable \
  --mkpath \
  "

alias copy="rsync $rsyncflags --perms --executability"
alias extcopy="rsync $rsyncflags --info=NAME,STATS2 --verbose"
alias mov="copy --remove-source-files"

# Rclone
export RCLONE_PASSWORD_COMMAND="secret-tool lookup service rclone"

# gocryptfs private folder
alias pmount="mkdir -p \"$HOME/mnt/private\" && gocryptfs -extpass \"secret-tool lookup service gocryptfs-private\" \"$HOME/Documents/Private\" \"$HOME/mnt/private\""
alias pumount="umount \"$HOME/mnt/private\""

# Quick Mount
function qmount() {
  device="$(basename "$1")"

  if test -d "/mnt/$device"; then
    sudo rmdir "/mnt/$device" || return 1
  fi

  if test -d "$HOME/mnt/$device"; then
    rmdir "$HOME/mnt/$device" || return 1
  fi

  sudo mkdir "/mnt/$device" || return 1
  mkdir "$HOME/mnt/$device" || return 1

  sudo mount "$1" /mnt/"$device" || return 1
  mkdir "$HOME/mnt/$device" || return 1

  sudo bindfs -u "$(whoami)" -g "$(whoami)" /mnt/"$device" "$HOME/mnt/$device" || return 1

}

function qumount() {
  device="$(basename "$1")"

  sudo umount "$HOME/mnt/$device" || return 1
  rmdir "$HOME/mnt/$device"

  sudo umount "/mnt/$device" || return 1
  sudo rmdir "/mnt/$device"
}

# Colorized ip info
alias ip="ip -c"
alias ipa="ip a"

# Create python venv
alias mkvenv="python -m venv .venv && source ./.venv/bin/activate"

# Fun shutdown aliases
alias byebye="systemctl poweroff"
alias goodbye="systemctl poweroff -i"
alias zzz="systemctl suspend"
alias resurrect="systemctl reboot"
alias jesus="systemctl reboot -i"
alias respawn="systemctl soft-reboot"

# systemctl aliases
alias scs="systemctl status"
alias scsl="scs -l "
alias scst="systemctl start"
alias scstp="systemctl stop"
alias scr="systemctl restart"
alias scen="systemctl enable"
alias scdis="systemctl disable"
alias scf="systemctl --failed"

# journalctl aliases
alias jf="journalctl -f"
alias jb="journalctl -b"
alias ju="journalctl -u"
alias jfb="journalctl -f -b"
alias jbf="jfb"
alias jfu="journalctl -f -u"
alias jbu="journalctl -b -u"
alias jbfu="journalctl -b -f -u"
alias jfbu="jbfu"

# systemctl --user aliases
alias scus="systemctl --user status"
alias scusl="scus -l "
alias scust="systemctl --user start"
alias scustp="systemctl --user stop"
alias scur="systemctl --user restart"
alias scuen="systemctl --user enable"
alias scudis="systemctl --user disable"
alias scuf="systemctl --user --failed"

# journalctl --user aliases
alias juf="journalctl --user -f"
alias jub="journalctl --user -b"
alias juu="journalctl --user -u"
alias jufb="journalctl --user -f -b"
alias jubf="jufb"
alias jufu="journalctl --user -f -u"
alias jubu="journalctl --user -b -u"
alias jubfu="journalctl --user -b -f -u"
alias jufbu="jubfu"

alias ino="arduino-cli"

# ani-cli alias to download first 100 (almost all) episodes of an anime
# Anime name is the current directory name
alias anidl="ani-cli -d -e 1-100 \"\$(basename \"\$(realpath .)\")\""

# xdg-ninja
alias xdg-maid="xdg-ninja --skip-ok --skip-unsupported"

# Yazi change cwd on exit
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sudo/sudo.plugin.zsh
# <ESC>mx to move current command to tmux session
__replace-buffer() {
  local old=$1 new=$2 space=${2:+ }

  # if the cursor is positioned in the $old part of the text, make
  # the substitution and leave the cursor after the $new text
  if [[ $CURSOR -le ${#old} ]]; then
    BUFFER="${new}${space}${BUFFER#$old }"
    CURSOR=${#new}
  # otherwise just replace $old with $new in the text before the cursor
  else
    LBUFFER="${new}${space}${LBUFFER#$old }"
  fi
}


tmux-command-line() {
  # If line is empty, get the last run command from history
  [[ -z $BUFFER ]] && LBUFFER="$(fc -ln -1)"

  # Save beginning space
  local WHITESPACE=""
  if [[ ${LBUFFER:0:1} = " " ]]; then
    WHITESPACE=" "
    LBUFFER="${LBUFFER:1}"
  fi

  {
    # Simple tmux toggle functionality
    case "$BUFFER" in
      tmux\ new-session\ *) __replace-buffer "tmux new-session" "" ;;
      *) LBUFFER="tmux new-session $LBUFFER" ;;
    esac
  } always {
    # Preserve beginning space
    LBUFFER="${WHITESPACE}${LBUFFER}"

    # Redisplay edit buffer (compatibility with zsh-syntax-highlighting)
    zle && zle redisplay # only run redisplay if zle is enabled
  }
}

zle -N tmux-command-line
bindkey "\e"mx tmux-command-line

# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sudo/sudo.plugin.zsh
# <ESC>px to toggle proxychains for the current command
proxychains-command-line() {
  # If line is empty, get the last run command from history
  [[ -z $BUFFER ]] && LBUFFER="$(fc -ln -1)"

  # Save beginning space
  local WHITESPACE=""
  if [[ ${LBUFFER:0:1} = " " ]]; then
    WHITESPACE=" "
    LBUFFER="${LBUFFER:1}"
  fi

  {
    # Simple proxychains toggle functionality
    case "$BUFFER" in
      proxychains\ *) __replace-buffer "proxychains" "" ;;
      *) LBUFFER="proxychains $LBUFFER" ;;
    esac
  } always {
    # Preserve beginning space
    LBUFFER="${WHITESPACE}${LBUFFER}"

    # Redisplay edit buffer (compatibility with zsh-syntax-highlighting)
    zle && zle redisplay # only run redisplay if zle is enabled
  }
}
zle -N proxychains-command-line
bindkey "\e"px proxychains-command-line
